/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./client/index.jsx");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./client/index.jsx":
/*!**************************!*\
  !*** ./client/index.jsx ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/* eslint-disable camelcase */\n// Calculate relative date posted\nvar calculateDatePosted = function calculateDatePosted(dateInteger) {\n  var today = Date.now();\n  var daysSince = Math.round((today - dateInteger) / (1000 * 60 * 60 * 24)); // If in years, record years\n\n  if (548 > daysSince >= 350) {\n    return \"\".concat(Math.round(daysSince / 365, 0), \" year ago\");\n  }\n\n  if (daysSince >= 350) {\n    return \"\".concat(Math.round(daysSince / 365, 0), \" years ago\");\n  } // If in months, record months\n\n\n  if (45 > daysSince >= 27) {\n    return \"\".concat(Math.round(daysSince / 30, 0), \" month ago\");\n  }\n\n  if (daysSince >= 27) {\n    return \"\".concat(Math.round(daysSince / 30, 0), \" months ago\");\n  } // If in weeks, record weeks\n\n\n  if (daysSince === 7) {\n    return \"\".concat(Math.round(daysSince / 7, 0), \" week ago\");\n  }\n\n  if (daysSince >= 6) {\n    return \"\".concat(Math.round(daysSince / 7, 0), \" weeks ago\");\n  } // If in days, record days\n\n\n  if (daysSince === 1) {\n    return \"\".concat(Math.round(daysSince, 0), \" day ago\");\n  }\n\n  if (daysSince > 1) {\n    return \"\".concat(Math.round(daysSince, 0), \" days ago\");\n  } // If in hours, record hours\n\n\n  if (daysSince >= 1 / 24) {\n    return \"\".concat(Math.round(daysSince / 24, 1), \" hours ago\");\n  } // If in minutes, record minutes\n\n\n  if (daysSince >= 1 / 1440) {\n    return \"\".concat(Math.round(daysSince / 1440, 0), \" minutes ago\");\n  } // If in seconds, record < 1 minute\n\n\n  if (daysSince <= 1 / 1440) {\n    return 'Less than a minute ago';\n  }\n}; // Calculate the playback time in mm:ss\n\n\nvar calculateMMSS = function calculateMMSS(seconds) {\n  var secondsInt = parseInt(seconds, 10);\n  var minutes = Math.floor(secondsInt / 60) % 60;\n  var seconds = secondsInt % 60;\n  seconds = seconds < 10 ? '0' + seconds : seconds;\n  return [minutes, seconds].filter(function (v, i) {\n    return v !== '00' || i > 0;\n  }).join(':');\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); // Set state - mostly revolves around current song playing\n\n    _this.state = {\n      // Song Audio is a JS Audio object\n      currentSongAudio: new Audio(),\n      // Store current song's metadata\n      currentSongObj: {\n        Id: 0,\n        song_id: 'Song_00000',\n        song_name: '',\n        artist_name: '',\n        upload_time: '',\n        tag: '',\n        song_art_url: '',\n        song_data_url: '',\n        background_light: '(168, 12, 20)',\n        background_dark: '(68, 76, 60)',\n        currentTime: 0,\n        currentTimeMMSS: '00',\n        durationMMSS: '00:00'\n      },\n      songQueueAudio: [],\n      songQueueObjects: [],\n      songObjs: [],\n      // Store ID of interval for timer\n      timerIntervalID: null,\n      playButtonState: 'play',\n      // Record ids of songs already played\n      songsPlayedIDs: new Set()\n    }; // Bind functions to this\n\n    _this.setState = _this.setState.bind(_assertThisInitialized(_this));\n    _this.recordNextSongsLength = _this.recordNextSongsLength.bind(_assertThisInitialized(_this));\n    _this.playSong = _this.playSong.bind(_assertThisInitialized(_this));\n    _this.pauseSong = _this.pauseSong.bind(_assertThisInitialized(_this));\n    _this.incrementTimer = _this.incrementTimer.bind(_assertThisInitialized(_this));\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_this));\n    _this.stopTimer = _this.stopTimer.bind(_assertThisInitialized(_this));\n    _this.playNextFromQueue = _this.playNextFromQueue.bind(_assertThisInitialized(_this));\n    _this.initialGetThreeSongs = _this.initialGetThreeSongs.bind(_assertThisInitialized(_this));\n    _this.backgroundGetThreeSongs = _this.backgroundGetThreeSongs.bind(_assertThisInitialized(_this));\n    _this.handleSliderChange = _this.handleSliderChange.bind(_assertThisInitialized(_this));\n    return _this;\n  } // On mount, get some songs from S3; set interval to get more songs\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // GET songs from db\n      this.initialGetThreeSongs(); // Set listener to get more songs if user has fewer than two songs enqueued\n\n      setInterval(function () {\n        if (_this2.state.songQueueAudio.length < 2) {\n          console.log('loading more songs!');\n\n          _this2.backgroundGetThreeSongs();\n        }\n      }, 10000);\n    } // Get three songs loaded from AWS\n\n  }, {\n    key: \"initialGetThreeSongs\",\n    value: function initialGetThreeSongs() {\n      var _this3 = this;\n\n      axios.get('http://localhost:5001/three-songs').then(function (response) {\n        var songObjs = response.data; // Create first song's audio file\n\n        var firstSongObj = songObjs.pop();\n        firstSongObj.date_posted = calculateDatePosted(firstSongObj.upload_time);\n        var firstSongAudio = new Audio(firstSongObj.song_data_url); // Set to state then do the same for the rest of the songs\n\n        _this3.setState({\n          currentSongObj: firstSongObj,\n          currentSongAudio: firstSongAudio\n        }, function () {\n          // Create Audio object for remaining songs\n          var remainingSongsAudio = [];\n\n          for (var i = 0; i < songObjs.length; i++) {\n            songObjs[i].date_posted = calculateDatePosted(songObjs[i].upload_time);\n            remainingSongsAudio.push(new Audio(songObjs[i].song_data_url));\n          } // Set state with new audio objects, song objects\n\n\n          _this3.setState({\n            songQueueAudio: remainingSongsAudio,\n            songQueueObjects: songObjs\n          });\n        });\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n    } // Get one song loaded from AWS\n\n  }, {\n    key: \"backgroundGetThreeSongs\",\n    value: function backgroundGetThreeSongs() {\n      var _this4 = this;\n\n      axios.get('http://localhost:5001/three-songs').then(function (response) {\n        var songObjs = response.data; // Create Audio object for remaining songs\n\n        var remainingSongsAudio = [];\n        var remainingSongsObjs = [];\n\n        for (var i = 0; i < songObjs.length; i++) {\n          // Only process, enqueue songs not yet played\n          if (!_this4.state.songsPlayedIDs.has(songObjs.song_id)) {\n            // Convert date posted to relative data posted\n            songObjs[i].date_posted = calculateDatePosted(songObjs[i].upload_time);\n            remainingSongsAudio.push(new Audio(songObjs[i].song_data_url));\n            remainingSongsObjs.push(songObjs[i]);\n          }\n        } // Set state with new audio objects, song objects\n\n\n        _this4.setState({\n          songQueueAudio: remainingSongsAudio,\n          songQueueObjects: remainingSongsObjs\n        });\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n    } // Remove song from Audio and Obj queues; set to current song in state\n\n  }, {\n    key: \"playNextFromQueue\",\n    value: function playNextFromQueue() {\n      var _this5 = this;\n\n      // If queue has songs, get the next one\n      if (this.state.songQueueAudio.length) {\n        var _this$state = this.state,\n            songQueueAudio = _this$state.songQueueAudio,\n            songQueueObjects = _this$state.songQueueObjects;\n        var songAudio = songQueueAudio.pop();\n        var songObj = songQueueObjects.pop(); // Set current playback time to 0\n\n        songObj.currentTime = 0;\n        songObj.currentTimeMMSS = calculateMMSS(songObj.currentTime);\n        songObj.durationMMSS = calculateMMSS(songAudio.duration); // Stop current song's playback\n\n        this.pauseSong();\n        this.setState({\n          currentSongAudio: songAudio,\n          songQueueAudio: songQueueAudio,\n          songQueueObjects: songQueueObjects,\n          timerIntervalID: null,\n          currentSongObj: songObj\n        }, // Then, update song length on page\n        function () {\n          // this.recordNextSongsLength(songAudio);\n          // Start current song's playback\n          _this5.playSong();\n        });\n      } else {\n        this.initialGetThreeSongs();\n      }\n    } // Calculate a song's length in format MM:SS; save in state\n\n  }, {\n    key: \"recordNextSongsLength\",\n    value: function recordNextSongsLength(songAudio) {\n      // Iteratively reduce durationRemaining to create time string\n      var durationRemaining = Math.floor(songAudio.duration);\n      var length = ''; // If 1+ hours long, record those hours\n\n      if (durationRemaining > 3600) {\n        var hours = Math.floor(durationRemaining / 3600);\n        length += \"\".concat(hours, \":\");\n        durationRemaining -= hours * 3600;\n      } // If 1+ minutes long, record those minutes\n\n\n      if (durationRemaining > 60) {\n        var minutes = Math.floor(durationRemaining / 60);\n        length += \"\".concat(minutes, \":\");\n        durationRemaining -= minutes * 60;\n      } else {\n        length += '0:';\n      } // If 1+ seconds long, record those seconds\n\n\n      if (durationRemaining > 0) {\n        if (durationRemaining < 10) {\n          // If sinlgle-digit, pad-\n          length += JSON.stringify(durationRemaining).padStart(2, '0');\n        } else {\n          length += \"\".concat(durationRemaining);\n        }\n      } // Save to state\n\n\n      this.setState(function (state) {\n        var currentSongObj = state.currentSongObj;\n        currentSongObj.lengthString = length;\n        return {\n          currentSongObj: currentSongObj\n        };\n      });\n    } // Start song playback if a song is selected\n\n  }, {\n    key: \"playSong\",\n    value: function playSong() {\n      var _this6 = this;\n\n      if (this.state.currentSongAudio) {\n        // Change play button to pause button\n        this.setState({\n          playButtonState: 'pause'\n        }, function () {\n          _this6.state.currentSongAudio.play(); // Listen for song to finish\n\n\n          _this6.state.currentSongAudio.addEventListener('ended', function () {\n            // Start next song\n            _this6.playNextFromQueue();\n          }); // Start song timer\n\n\n          _this6.startTimer(); // Record song as having been played\n\n\n          _this6.setState(function (state) {\n            return {\n              songsPlayedIDs: state.songsPlayedIDs.add(state.currentSongObj.song_id)\n            };\n          });\n        });\n      }\n    } // Pause song playback if a song is selected\n\n  }, {\n    key: \"pauseSong\",\n    value: function pauseSong() {\n      if (this.state.currentSongAudio) {\n        // Change play button to pause button\n        this.setState({\n          playButtonState: 'play'\n        });\n        this.state.currentSongAudio.pause(); // Stop song timer\n\n        this.stopTimer();\n      }\n    } // Increment the current song's timer every second\n\n  }, {\n    key: \"incrementTimer\",\n    value: function incrementTimer() {\n      var _this7 = this;\n\n      var currentTime = this.state.currentSongAudio.currentTime;\n      this.setState(function (state) {\n        var currentSongObj = _this7.state.currentSongObj; // Save timer as integer in state\n\n        currentSongObj.currentTime = Math.floor(currentTime + 1);\n        currentSongObj.currentTimeMMSS = calculateMMSS(currentSongObj.currentTime);\n        return {\n          currentSongObj: currentSongObj\n        };\n      });\n    } // Start playback timer for current song; save interval's ID in state\n\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      // Update timer every second\n      var timerIntervalID = setInterval(this.incrementTimer, 1000); // Record id of interval\n\n      this.setState({\n        timerIntervalID: timerIntervalID\n      });\n    } // Stop the timer for current song playback; use timer interval ID in state\n\n  }, {\n    key: \"stopTimer\",\n    value: function stopTimer() {\n      // Get ID of timer currently running\n      var ID = this.state.timerIntervalID; // Clear interval with id\n\n      clearInterval(ID);\n    } // Toggle current place in song using the slider\n\n  }, {\n    key: \"handleSliderChange\",\n    value: function handleSliderChange(event) {\n      // Save currentTime in object\n      var newSongObj = this.state.currentSongObj;\n      newSongObj.currentTime = event.target.value; // Save currentTime in audio object as well\n\n      var newSongAudio = this.state.currentSongAudio;\n      newSongAudio.currentTime = event.target.value; // Persis in state\n\n      this.setState({\n        test: event.target.value,\n        currentSongObj: newSongObj,\n        currentSongAudio: newSongAudio\n      });\n    } // Render App component\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this8 = this;\n\n      var playButtonState = this.state.playButtonState;\n      var _this$state$currentSo = this.state.currentSongObj,\n          currentTime = _this$state$currentSo.currentTime,\n          currentTimeMMSS = _this$state$currentSo.currentTimeMMSS,\n          durationMMSS = _this$state$currentSo.durationMMSS,\n          artist_name = _this$state$currentSo.artist_name,\n          song_name = _this$state$currentSo.song_name,\n          date_posted = _this$state$currentSo.date_posted,\n          tag = _this$state$currentSo.tag,\n          song_art_url = _this$state$currentSo.song_art_url;\n      var currentSongAudio = this.state.currentSongAudio || 60;\n      var length = currentSongAudio.duration || 60;\n      return React.createElement(\"div\", null, React.createElement(\"div\", {\n        className: \"nav-bar\"\n      }), React.createElement(\"div\", {\n        id: \"playbackCenter\",\n        className: \"outer-player-panel\"\n      }, React.createElement(\"div\", {\n        className: \"inner-player-panel\",\n        style: {\n          background: \"linear-gradient(\\n                135deg,\\n                rgb\".concat(this.state.currentSongObj.background_light, \" 0%,\\n                rgb\").concat(this.state.currentSongObj.background_dark, \" 100%\")\n        }\n      }, React.createElement(\"div\", {\n        className: \"player-head\"\n      }, React.createElement(\"div\", {\n        className: \"play-button-wrapper\",\n        onClick: function onClick() {\n          if (playButtonState === 'play') {\n            _this8.playSong();\n          } else {\n            _this8.pauseSong();\n          }\n        }\n      }, React.createElement(\"div\", {\n        className: playButtonState + '-button'\n      })), React.createElement(\"div\", {\n        className: \"artist-name-container\"\n      }, React.createElement(\"span\", {\n        className: \"artist-name fit-width-to-contents\"\n      }, artist_name)), React.createElement(\"div\", {\n        className: \"song-name-container\"\n      }, React.createElement(\"span\", {\n        className: \"song-name fit-width-to-contents\"\n      }, song_name)), React.createElement(\"div\", {\n        className: \"date-posted-container\"\n      }, React.createElement(\"div\", {\n        className: \"date-posted\"\n      }, date_posted)), React.createElement(\"div\", {\n        className: \"tags-container\"\n      }, React.createElement(\"div\", {\n        className: \"tags fit-width-to-contents\"\n      }, tag))), React.createElement(\"div\", {\n        className: \"album-art\"\n      }, React.createElement(\"img\", {\n        src: song_art_url,\n        alt: \"\",\n        className: \"album-art\"\n      })), React.createElement(\"div\", {\n        className: \"song-player\"\n      }, React.createElement(\"div\", {\n        className: \"current-playback-timer-container\"\n      }, React.createElement(\"div\", {\n        className: \"current-playback-timer fit-width-to-contents\"\n      }, currentTimeMMSS)), React.createElement(\"div\", {\n        className: \"total-song-length-container\"\n      }, React.createElement(\"div\", {\n        className: \"total-song-length\"\n      }, durationMMSS)), React.createElement(\"div\", {\n        className: \"waveform-container\"\n      }, React.createElement(\"img\", {\n        className: \"waveform\",\n        src: \"./ChartJpg.jpg\",\n        alt: \"\"\n      })), React.createElement(\"div\", {\n        className: \"playback-slider-container\"\n      }, React.createElement(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: length,\n        value: currentTime,\n        onChange: this.handleSliderChange,\n        className: \"playback-slider\",\n        style: {\n          background: \"linear-gradient(\\n                      90deg, \\n                      #f50 \".concat(this.state.currentSongAudio.currentTime / this.state.currentSongAudio.duration * 100, \"%, \\n                      #999999 0%)\")\n        }\n      }))))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nReactDOM.render(React.createElement(App, null), document.querySelector('#app'));\n\n//# sourceURL=webpack:///./client/index.jsx?");

/***/ })

/******/ });